generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  mobileNo           String?             @unique
  username           String              @unique
  password           String
  departmentId       String?
  createdAt          DateTime            @default(now())
  roleId             String
  feedbackId         String?
  occurrencesCreated Occurrence[]        @relation("CreatedOccurrences")
  occurrencesUpdated Occurrence[]        @relation("UpdatedOccurrences")
  messages           OccurrenceMessage[]
  department         Department?         @relation(fields: [departmentId], references: [id])
  role               Role                @relation(fields: [roleId], references: [id])

  // Feedback token relations
  sharedFeedbackTokens    FeedbackToken[] @relation("SharedFeedbackTokens")
  respondedFeedbackTokens FeedbackToken[] @relation("RespondedFeedbackTokens")

  // Notification relations
  notificationPreferences NotificationPreference[]
  notifications           Notification[]
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique // e.g., "manage:occurrences", "view:dashboard"
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Department {
  id                String                 @id @default(uuid())
  name              String                 @unique
  assignments       OccurrenceAssignment[]
  OccurrenceMessage OccurrenceMessage[]
  users             User[]
}

model Occurrence {
  id                  String                 @id @default(uuid())
  occurrenceNo        String                 @unique @default("OCC25-0000") // User-friendly ID
  mrn                 String?                @default("0000000000")
  isPatientInvolve    Boolean                @default(false)
  description         String
  statusId            String
  incidentId          String
  occurrenceDate      DateTime               @default(now())
  createdById         String?
  updatedById         String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  assignedByQualityAt DateTime?
  closedByQualityAt   DateTime?
  severityId          String?
  locationId          String?
  createdBy           User?                  @relation("CreatedOccurrences", fields: [createdById], references: [id])
  updatedBy           User?                  @relation("UpdatedOccurrences", fields: [updatedById], references: [id])
  incident            Incident               @relation(fields: [incidentId], references: [id])
  location            OccurrenceLocation?    @relation(fields: [locationId], references: [id])
  Severity            Severity?              @relation(fields: [severityId], references: [id])
  status              OccurrenceStatus       @relation(fields: [statusId], references: [id])
  assignments         OccurrenceAssignment[]
  messages            OccurrenceMessage[]
}

model OccurrenceLocation {
  id         String       @id @default(uuid())
  name       String       @unique
  level      String?
  occurrence Occurrence[]
}

model OccurrenceAssignment {
  id           String    @id @default(uuid())
  occurrenceId String
  departmentId String
  rootCause    String?
  actionPlan   String?
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  assignedAt   DateTime  @default(now())
  message      String?
  feedbackId   String?

  department Department @relation(fields: [departmentId], references: [id])
  occurrence Occurrence @relation(fields: [occurrenceId], references: [id])

  feedbackToken FeedbackToken? @relation
}

model OccurrenceMessage {
  id                    String      @id @default(uuid())
  occurrenceId          String
  senderId              String
  recipientDepartmentId String?
  message               String
  createdAt             DateTime    @default(now())
  occurrence            Occurrence  @relation(fields: [occurrenceId], references: [id])
  recipientDepartment   Department? @relation(fields: [recipientDepartmentId], references: [id])
  sender                User        @relation(fields: [senderId], references: [id])
}

model FeedbackToken {
  id              String    @id @default(uuid())
  token           String    @unique
  assignmentId    String    @unique // FK to OccurrenceAssignment
  sharedById      String // Department head
  respondedById   String? // Employee who responded
  respondedAt     DateTime?
  expiresAt       DateTime
  used            Boolean   @default(false)
  createdAt       DateTime  @default(now())
  responseMessage String?

  assignment  OccurrenceAssignment @relation(fields: [assignmentId], references: [id])
  sharedBy    User                 @relation("SharedFeedbackTokens", fields: [sharedById], references: [id])
  respondedBy User?                @relation("RespondedFeedbackTokens", fields: [respondedById], references: [id])
}

model OccurrenceStatus {
  id          String       @id @default(uuid())
  name        String       @unique
  variant     String?
  occurrences Occurrence[]
}

model Incident {
  id          String       @id @default(uuid())
  name        String       
  description String?
  severityId  String
  oldId       String?
  category    String?
  parentId    String?
  parent      Incident?    @relation("IncidentHierarchy", fields: [parentId], references: [id])
  children    Incident[]   @relation("IncidentHierarchy")
  severity    Severity     @relation(fields: [severityId], references: [id])
  occurrences Occurrence[]
}

model Severity {
  id          String       @id @default(uuid())
  name        String       @unique
  level       Int
  variant     String?
  Incident    Incident[]
  occurrences Occurrence[]
}

// Notification settings per user
model NotificationPreference {
  id             String   @id @default(uuid())
  userId         String   @unique
  enabled        Boolean  @default(true)
  channel        NotificationChannel
  email          String?
  mobile         String?
  severityLevels String[] // Array of severity IDs the user wants to be notified about
  incidents  String[] // Array of incident IDs the user wants to be notified about
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationChannel {
  EMAIL
  MOBILE
  BOTH
}

// Sent notifications log
model Notification {
  id           String               @id @default(uuid())
  userId       String
  user         User                 @relation(fields: [userId], references: [id])
  title        String
  message      String
  type         NotificationType
  channel      NotificationChannel
  read         Boolean              @default(false)
  referenceIds String[]             // Store IDs of related entities (occurrences, referrals)
  createdAt    DateTime             @default(now())
  metadata     Json?                // Additional context data
}

enum NotificationType {
  OCCURRENCE_CREATED
  OCCURRENCE_UPDATED
  HIGH_SEVERITY
  REFERRAL
  ASSIGNMENT
  FEEDBACK
}