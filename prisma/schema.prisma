generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  username           String              @unique
  password           String
  departmentId       String?
  createdAt          DateTime            @default(now())
  roleId             String
  occurrencesCreated Occurrence[]        @relation("CreatedOccurrences")
  messages           OccurrenceMessage[]
  department         Department?         @relation(fields: [departmentId], references: [id])
  role               Role                @relation(fields: [roleId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Department {
  id                String                 @id @default(uuid())
  name              String                 @unique
  assignments       OccurrenceAssignment[]
  OccurrenceMessage OccurrenceMessage[]
  users             User[]
}

model Occurrence {
  id                  String    @id @default(uuid())
  title               String
  description         String
  statusId            String
  incidentId          String
  locationId          String?
  createdById         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  assignedByQualityAt DateTime?
  closedByQualityAt   DateTime?

  // Relations
  createdBy   User?                  @relation("CreatedOccurrences", fields: [createdById], references: [id])
  status      OccurrenceStatus       @relation(fields: [statusId], references: [id])
  incident    Incident               @relation(fields: [incidentId], references: [id])
  location    OccurrenceLocation?    @relation(fields: [locationId], references: [id])
  assignments OccurrenceAssignment[]
  messages    OccurrenceMessage[]
  Severity    Severity?              @relation(fields: [severityId], references: [id])
  severityId  String?
}

model OccurrenceLocation {
  id    String  @id @default(uuid())
  name  String  @unique
  level String?

  // Relations
  occurrence Occurrence[]
}

model OccurrenceAssignment {
  id           String     @id @default(uuid())
  occurrenceId String
  departmentId String
  rootCause    String?
  actionPlan   String?
  isCompleted  Boolean    @default(false)
  completedAt  DateTime?
  assignedAt   DateTime   @default(now())
  department   Department @relation(fields: [departmentId], references: [id])
  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id])
}

model OccurrenceMessage {
  id                    String      @id @default(uuid())
  occurrenceId          String
  senderId              String
  recipientDepartmentId String?
  message               String
  createdAt             DateTime    @default(now())
  occurrence            Occurrence  @relation(fields: [occurrenceId], references: [id])
  recipientDepartment   Department? @relation(fields: [recipientDepartmentId], references: [id])
  sender                User        @relation(fields: [senderId], references: [id])
}

model OccurrenceStatus {
  id          String       @id @default(uuid())
  name        String       @unique
  variant     String?
  occurrences Occurrence[]
}

model Incident {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  severityId  String
  parentId    String? // Optional parent ID for sub-incidents

  // Relations
  severity    Severity     @relation(fields: [severityId], references: [id])
  parent      Incident?    @relation("IncidentHierarchy", fields: [parentId], references: [id])
  children    Incident[]   @relation("IncidentHierarchy")
  occurrences Occurrence[]
}

model Severity {
  id          String       @id @default(uuid())
  name        String       @unique
  level       Int
  variant     String?
  occurrences Occurrence[]
  Incident    Incident[]
}
