// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  name         String
  email        String      @unique
  username     String      @unique
  password     String
  departmentId String?
  department   Department? @relation(fields: [departmentId], references: [id])
  createdAt    DateTime    @default(now())

  occurrencesCreated Occurrence[]        @relation("CreatedOccurrences")
  messages           OccurrenceMessage[]

  // Relation to Role
  roleId String // Foreign key
  role   Role   @relation(fields: [roleId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users User[] // One Role can have many Users
}

model Department {
  id   String @id @default(uuid())
  name String @unique

  users             User[]
  assignments       OccurrenceAssignment[]
  OccurrenceMessage OccurrenceMessage[]
}

model Occurrence {
  id                  String           @id @default(uuid())
  title               String
  description         String
  statusId            String
  createdById         String
  createdBy           User             @relation("CreatedOccurrences", fields: [createdById], references: [id])
  createdAt           DateTime         @default(now())
  assignedByQualityAt DateTime?
  closedByQualityAt   DateTime?

  status      OccurrenceStatus         @relation(fields: [statusId], references: [id])
  assignments OccurrenceAssignment[]
  messages    OccurrenceMessage[]
}

model OccurrenceAssignment {
  id           String     @id @default(uuid())
  occurrenceId String
  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  rootCause   String?
  actionPlan  String?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  assignedAt  DateTime  @default(now())
}

model OccurrenceMessage {
  id           String     @id @default(uuid())
  occurrenceId String
  occurrence   Occurrence @relation(fields: [occurrenceId], references: [id])

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  recipientDepartmentId String?
  recipientDepartment   Department? @relation(fields: [recipientDepartmentId], references: [id])

  message   String
  createdAt DateTime @default(now())
}

model OccurrenceStatus {
  id   String @id @default(uuid())
  name String

  // Relations
  occurrences Occurrence[]
}
