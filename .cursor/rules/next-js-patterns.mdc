---
description: Next.js Patterns and API Routes
globs: *.ts,*.tsx
alwaysApply: false
---

# Next.js Patterns and API Routes

<rule>
name: next_js_patterns
description: Standards for implementing Next.js patterns and API routes in the OVA system
filters:
  - type: file_extension
    pattern: "\\.tsx$|\\.ts$"
  - type: content
    pattern: "(?s)import.*?next|'use client'|'use server'|NextResponse|NextRequest"

actions:
  - type: suggest
    message: |
      ## Next.js Best Practices

      1. App Router Structure:
         ```
         app/
         ├── (auth)/
         │   ├── login/
         │   │   └── page.tsx
         │   ├── register/
         │   │   └── page.tsx
         │   └── layout.tsx
         ├── (dashboard)/
         │   ├── incidents/
         │   │   ├── [id]/
         │   │   │   ├── page.tsx
         │   │   │   └── edit/
         │   │   │       └── page.tsx
         │   │   ├── new/
         │   │   │   └── page.tsx
         │   │   └── page.tsx
         │   ├── reports/
         │   │   └── page.tsx
         │   └── layout.tsx
         ├── api/
         │   ├── incidents/
         │   │   ├── [id]/
         │   │   │   ├── route.ts
         │   │   │   └── status/
         │   │   │       └── route.ts
         │   │   └── route.ts
         │   └── auth/
         │       └── [...nextauth]/
         │           └── route.ts
         ├── layout.tsx
         └── page.tsx
         ```

      2. Client Components:
         ```tsx
         'use client'
         
         import { useState } from 'react'
         import { Button } from '@/components/ui/button'
         
         interface ClientComponentProps {
           initialData: any
         }
         
         export function ClientComponent({ initialData }: ClientComponentProps) {
           // Client-side state
           const [data, setData] = useState(initialData)
           
           // Event handlers
           const handleClick = () => {
             setData({ ...data, updated: true })
           }
           
           return (
             <div>
               <pre>{JSON.stringify(data, null, 2)}</pre>
               <Button onClick={handleClick}>Update Data</Button>
             </div>
           )
         }
         ```
      3. Client Component with params:
      ```tsx
        'use client'
        import * as React from 'react'
        
        function Page({ params }) {
            // asynchronous access of `params.id`.
            const { id } = React.use(params)
            return <p>ID: {id}</p>
        }
      ```

      3. Server Components (Default):
         ```tsx
         // This is a Server Component by default (no 'use client' directive)
         import { ClientComponent } from '@/components/ClientComponent'
         import { prisma } from '@/lib/prisma'
         import { checkServerPermission } from "@/lib/server-permissions";
         
         export default async function IncidentsPage() {
            await checkServerPermission("manage:incidents");
           // Data fetching in server component
           const incidents = await prisma.incident.findMany({
             take: 10,
             orderBy: {
               createdAt: 'desc',
             },
             include: {
               reporter: {
                 select: {
                   name: true,
                 },
               },
             },
           })
           
           return (
            <DashboardShell>
                <div className="space-y-6">
                <DashboardHeader
                    heading="Occurrences"
                    text="Manage and track reported occurrences">
                    <Link href="/occurrences/new">
                    <PermissionButton permission="create:occurrence" asChild>
                        <PlusCircle className="mr-2 h-4 w-4" />
                        Report Occurrence
                    </PermissionButton>
                    </Link>
                </DashboardHeader>
                
                {/* Pass server data to client component */}
                <ClientComponent initialData={incidents} />
                </div>
            </DashboardShell>

           )
         }
         ```

      4. Server Components with params:
         ```tsx
         // This is a Server Component by default (no 'use client' directive)
         import { ClientComponent } from '@/components/ClientComponent'
         import { prisma } from '@/lib/prisma'
         import { checkServerPermission } from "@/lib/server-permissions";
         
         async function Page({ params }) {
            // asynchronous access of `params.id`.
            const { id } = await params
            return <p>ID: {id}</p>
         }
         ```

      6. Authentication Integration:
         ```tsx
         // lib/auth.ts
         import { PrismaAdapter } from '@auth/prisma-adapter'
         import { prisma } from '@/lib/prisma'
         import { type NextAuthOptions } from 'next-auth'
         import CredentialsProvider from 'next-auth/providers/credentials'
         import bcrypt from 'bcrypt'
         
         export const authOptions: NextAuthOptions = {
           adapter: PrismaAdapter(prisma),
           session: {
             strategy: 'jwt',
           },
           pages: {
             signIn: '/login',
           },
           providers: [
             CredentialsProvider({
               name: 'Credentials',
               credentials: {
                 email: { label: 'Email', type: 'email' },
                 password: { label: 'Password', type: 'password' },
               },
               async authorize(credentials) {
                 if (!credentials?.email || !credentials?.password) {
                   return null
                 }
                 
                 const user = await prisma.user.findUnique({
                   where: {
                     email: credentials.email,
                   },
                 })
                 
                 if (!user || !user.password) {
                   return null
                 }
                 
                 const isValidPassword = await bcrypt.compare(
                   credentials.password,
                   user.password
                 )
                 
                 if (!isValidPassword) {
                   return null
                 }
                 
                 return {
                   id: user.id,
                   email: user.email,
                   name: user.name,
                   role: user.role,
                 }
               },
             }),
           ],
           callbacks: {
             async jwt({ token, user }) {
               if (user) {
                 token.id = user.id
                 token.role = user.role
               }
               return token
             },
             async session({ session, token }) {
               if (token) {
                 session.user.id = token.id
                 session.user.role = token.role
               }
               return session
             },
           },
         }
         ```
metadata:
  priority: high
  version: 1.0
</rule> 