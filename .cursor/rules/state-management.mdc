---
description: State Management with Zustand and React Query
globs: *.ts,*.tsx,*.js,*.jsx
alwaysApply: false
---

# State Management with Zustand and React Query

<rule>
name: state_management
description: Standards for implementing state management using Zustand for client state and React Query for server state
filters:
  - type: file_extension
    pattern: "\\.tsx$|\\.ts$"
  - type: content
    pattern: "(?s)import.*?zustand|create\\s*\\(|useMutation|useQuery|queryClient"

actions:
  - type: suggest
    message: |
      ## State Management Best Practices

      1. Zustand Store Setup:
         ```typescript
         // stores/incidentStore.ts
         import { create } from 'zustand'
         
         type IncidentFilters = {
           status?: string
           severity?: string
           department?: string
           dateRange?: {
             from: Date | undefined
             to: Date | undefined
           }
         }
         
         interface IncidentState {
           // State
           filters: IncidentFilters
           searchQuery: string
           currentView: 'list' | 'grid' | 'calendar'
           
           // Actions
           setFilters: (filters: Partial<IncidentFilters>) => void
           resetFilters: () => void
           setSearchQuery: (query: string) => void
           setCurrentView: (view: 'list' | 'grid' | 'calendar') => void
         }
         
         export const useIncidentStore = create<IncidentState>((set) => ({
           // Initial state
           filters: {},
           searchQuery: '',
           currentView: 'list',
           
           // Actions
           setFilters: (newFilters) => 
             set((state) => ({ filters: { ...state.filters, ...newFilters } })),
           
           resetFilters: () => 
             set({ filters: {} }),
           
           setSearchQuery: (query) => 
             set({ searchQuery: query }),
           
           setCurrentView: (view) => 
             set({ currentView: view }),
         }))
         ```

      2. React Query Setup:
         ```typescript
         // lib/react-query.ts
         import { QueryClient } from '@tanstack/react-query'
         
         export const queryClient = new QueryClient({
           defaultOptions: {
             queries: {
               staleTime: 60 * 1000, // 1 minute
               refetchOnWindowFocus: false,
               retry: 1,
             },
           },
         })
         ```

      3. Data Fetching with React Query:
         ```typescript
         // hooks/useIncidents.ts
         import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
         import { useIncidentStore } from '@/stores/incidentStore'
         
         export function useIncidents() {
           const { filters, searchQuery } = useIncidentStore()
           
           return useQuery({
             queryKey: ['incidents', filters, searchQuery],
             queryFn: async () => {
               const queryParams = new URLSearchParams()
               
               if (searchQuery) {
                 queryParams.set('q', searchQuery)
               }
               
               if (filters.status) {
                 queryParams.set('status', filters.status)
               }
               
               // Add other filters as needed
               
               const response = await fetch(`/api/incidents?${queryParams.toString()}`)
               
               if (!response.ok) {
                 throw new Error('Failed to fetch incidents')
               }
               
               return response.json()
             },
           })
         }
         ```

      4. Mutations with React Query:
         ```typescript
         // hooks/useCreateIncident.ts
         import { useMutation, useQueryClient } from '@tanstack/react-query'
         
         export function useCreateIncident() {
           const queryClient = useQueryClient()
           
           return useMutation({
             mutationFn: async (incidentData) => {
               const response = await fetch('/api/incidents', {
                 method: 'POST',
                 headers: {
                   'Content-Type': 'application/json',
                 },
                 body: JSON.stringify(incidentData),
               })
               
               if (!response.ok) {
                 throw new Error('Failed to create incident')
               }
               
               return response.json()
             },
             onSuccess: () => {
               // Invalidate and refetch
               queryClient.invalidateQueries({ queryKey: ['incidents'] })
             },
           })
         }
         ```

      5. Combining Zustand and React Query:
         ```tsx
         // components/IncidentList.tsx
         import { useIncidents } from '@/hooks/useIncidents'
         import { useIncidentStore } from '@/stores/incidentStore'
         
         export function IncidentList() {
           const { filters, setFilters, currentView } = useIncidentStore()
           const { data, isLoading, error } = useIncidents()
           
           // Render logic with loading, error, and data states
           if (isLoading) return <p>Loading...</p>
           if (error) return <p>Error: {error.message}</p>
           
           return (
             <div>
               <div className="flex space-x-4 mb-4">
                 <select 
                   value={filters.status || ''}
                   onChange={(e) => setFilters({ status: e.target.value })}
                 >
                   <option value="">All Statuses</option>
                   <option value="new">New</option>
                   <option value="in-progress">In Progress</option>
                   <option value="resolved">Resolved</option>
                 </select>
                 
                 {/* More filter controls */}
               </div>
               
               {currentView === 'list' ? (
                 <div className="space-y-4">
                   {data.incidents.map((incident) => (
                     <div key={incident.id} className="border p-4 rounded">
                       <h3>{incident.title}</h3>
                       <p>{incident.description}</p>
                     </div>
                   ))}
                 </div>
               ) : (
                 // Grid or Calendar view
                 <div className="grid grid-cols-3 gap-4">
                   {data.incidents.map((incident) => (
                     <div key={incident.id} className="border p-4 rounded">
                       <h3>{incident.title}</h3>
                     </div>
                   ))}
                 </div>
               )}
             </div>
           )
         }
         ```

      6. Auth State Management with Zustand:
         ```typescript
         // stores/authStore.ts
         import { create } from 'zustand'
         import { persist } from 'zustand/middleware'
         
         interface User {
           id: string
           name: string
           email: string
           role: string
         }
         
         interface AuthState {
           // State
           user: User | null
           isAuthenticated: boolean
           token: string | null
           
           // Actions
           login: (user: User, token: string) => void
           logout: () => void
         }
         
         export const useAuthStore = create<AuthState>()(
           persist(
             (set) => ({
               // Initial state
               user: null,
               isAuthenticated: false,
               token: null,
               
               // Actions
               login: (user, token) => set({ 
                 user, 
                 isAuthenticated: true, 
                 token 
               }),
               
               logout: () => set({ 
                 user: null, 
                 isAuthenticated: false, 
                 token: null 
               }),
             }),
             {
               name: 'auth-storage',
             }
           )
         )
         ```

      7. Advanced Patterns:
         ```typescript
         // Optimistic updates
         const useUpdateIncidentStatus = () => {
           const queryClient = useQueryClient()
           
           return useMutation({
             mutationFn: async ({ id, status }) => {
               const response = await fetch(`/api/incidents/${id}/status`, {
                 method: 'PATCH',
                 headers: { 'Content-Type': 'application/json' },
                 body: JSON.stringify({ status }),
               })
               
               if (!response.ok) throw new Error('Failed to update status')
               return response.json()
             },
             
             // Optimistic update
             onMutate: async ({ id, status }) => {
               // Cancel outgoing refetches
               await queryClient.cancelQueries({ queryKey: ['incidents'] })
               
               // Save previous state
               const previousIncidents = queryClient.getQueryData(['incidents'])
               
               // Optimistically update
               queryClient.setQueryData(['incidents'], (old) => ({
                 ...old,
                 incidents: old.incidents.map((incident) => 
                   incident.id === id 
                     ? { ...incident, status } 
                     : incident
                 ),
               }))
               
               // Return context with previous state
               return { previousIncidents }
             },
             
             // If error, roll back
             onError: (err, variables, context) => {
               if (context?.previousIncidents) {
                 queryClient.setQueryData(['incidents'], context.previousIncidents)
               }
             },
             
             // Always refetch after error or success
             onSettled: () => {
               queryClient.invalidateQueries({ queryKey: ['incidents'] })
             },
           })
         }
         ```

examples:
  - input: |
      import { useState, useEffect } from 'react'
      
      function useIncidents() {
        const [incidents, setIncidents] = useState([])
        const [loading, setLoading] = useState(true)
        
        useEffect(() => {
          const fetchIncidents = async () => {
            setLoading(true)
            const response = await fetch('/api/incidents')
            const data = await response.json()
            setIncidents(data)
            setLoading(false)
          }
          
          fetchIncidents()
        }, [])
        
        return { incidents, loading }
      }
    output: "Simple state management hook that could be improved with React Query"

metadata:
  priority: high
  version: 1.0
</rule> 